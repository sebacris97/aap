# -*- coding: utf-8 -*-
"""PERCEPTRON_FRUTAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FvmTI3faJAtkj8Q8XWSX_ZhYzWYTAz7E
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np

#from matplotlib import pyplot as plt
from matplotlib import pylab as plt

from ClassPerceptron import Perceptron

# Leer distribucion.csv
datos = pd.read_csv("distribucion.csv")
nColum = list(datos.columns.values)

#NORMALIZAR POR MEDIA Y DESVIO (tipificacion)
media = datos['unidades'].mean()
desvio = datos['unidades'].std()
datos['unidades']= (datos['unidades']-media)/desvio

media = datos['descuento'].mean()
desvio = datos['descuento'].std()
datos['descuento']= (datos['descuento']-media)/desvio

print(datos['unidades'])
print(datos['descuento'])

#--- DATOS DE ENTRENAMIENTO ---
X = np.array(datos.iloc[:,0:2])
print(X)

#--- SALIDA BINARIA ---
T = datos['envio'] == 'normal'  #es boolean
T = np.array(T * 1)  #lo convierte en binario
print(T)

ppn = Perceptron(alpha=0.01, n_iter=500, draw=1, title=nColum[0:2], random_state=1)
ppn.fit(X, T)

plt.close()
plt.plot(range(1, len(ppn.errors_) + 1), ppn.errors_, marker='o')
plt.xlabel('Iteraciones')
plt.ylabel('Cantidad de actualizaciones')
plt.show()

from PlotRegiones import plot_decision_regions

plot_decision_regions(X, T, classifier=ppn)
plt.xlabel(ppn.title[0])
plt.ylabel(ppn.title[1])
plt.legend(loc='lower left')
plt.show()

Y = ppn.predict(X)
print("Y = ", Y)
print("T = ", T)
aciertos = sum(Y == T)
print("aciertos = ", aciertos)
nAciertos = sum(Y==T)
print("%% de aciertos = %.2f %%" % (100*nAciertos/X.shape[0]))
